// Dockerfile -> Docker Image -> Container
//Docker files have no extension
// Docker Compose - file used for running multiple containers. It is a .yml file

First test your application can run locally in serve mode 
===========================================================

1. stop running containers:
	docker stop pg_container
	docker rm pg_container  //Docker will attempt to stop and remove the container named
	

2. download the starting files for the app // https://learn.nucamp.co/pluginfile.php/88933/mod_book/chapter/5241/hello_docker_django_vscode.zip?time=1634104265032
3. create virtual environment inside the outer containing folder -> hell_docker_django_vscode 
	python -m venv venv
	. venv/scripts/activate  // Activate virtual environment  for windows
4. Install requirements
	cd hello_django
	python -m pip install --upgrade pip==21.1.2  // This is optional
	python -m pip install -r requirements.txt
5. Start the django App	
	python manage.py runserver 8000
	
Containerizing Django App with Docker
=================================================

1. Identify project root folder and run vscode from there
	hello_django.
2. Generate Dockerfile // either via vscode's command pallete or manually (assuming you know what to add)
	If using vscode command pallete : ctrl+shift+p
		Docker: Add Docker files to workspace
		Select application platform: Python Django
		Choose apps entry point: manage.py
		port: 8000
		include optional files: No
3. Build Docker image
	vscode command pallete : ctrl+shift+p
		Docker Images: Build Image
	CLI:
		docker build -t hellodjango .   //the flag 't' is the name of the name-tag
4. Confirm Docker image creation
	docker images or via Docker GUI in windows
5. Run container from Docker image
	vscode command pallete : ctrl+shift+p
		Docker Images: Run:
		select image group. Select hellodjango
		Select image. Select latest.
			or via CLI
	docker run --rm -d -p 8000:8000/tcp hellodjango:latest  OR 
	docker run -p 8080:8080 -p 50000:50000 --rm -d --name my_jenkins jenkins/jenkins:lts-jdk11  //NOTE: the --name flag changes the name when the container is run.
6. Confirm the container is running
		docker ps -a
		
Install Docker from remote dockerhub repository
=================================================
docker pull jenkins/jenkins:lts-jdk11


Docker Operations
=======================================
docker images //List Docker images
docker inspect <ImageID>  // shows the configuration details of an image or container, along with network and other information.
docker run --rm -d  -p 8000:8000/tcp hellodjango:latest
		Flags
			rm: tells Docker to remove this container automatically when it exits with docker stop or docker kill
			-d: tells Docker to run the container in detached mode (in the background, without showing any log messages to the terminal) and to print the container ID. 
			-p: port mapping source/destination i.e. computer/container
docker ps // ist the Docker containers that are currently running
docker ps -a // lists all Docker containers on the system, whether they are running or not
docker history <ImageID> //To view the history of the Image
docker top <ContainerID> // show the top processes running in the container.
docker stats <ContainerID> // get a sense of the CPU usage, memory usage, and other operating system resource usage
	Flag:
		--no-stream //Pulls current result only
docker pause <ContainerID>  // pauses the processes in a running Docker container. Hence pauses the Docker container
docker unpause <ContainerID>
docker stop <ContainerID>
docker start <ContainerID>
docker restart <ContainerID>
docker kill <ContainerID>
docker rm <ContainerID> //Removes Docker container
docker rmi <ImageID> //Remove image from Docker repository


Containerizing Django App with Docker Compose
==============================================
Docker Compose is typically used for multiple containers. docker-compose.yml is used to configure services that comprise these application parts

1. Download starter file and Identify project root folder and run vscode from there.
		https://learn.nucamp.co/pluginfile.php/88933/mod_book/chapter/5245/hello_django_docker_compose.zip

2. Create docker-compose.yml file in the outer folder hello_django_docker_compose/ (NOT in App folder) 
		version: "3.8"
		services:
		  web:
			build: ./app
			command: python manage.py runserver 0.0.0.0:8000
			volumes:
			  - ./app/:/usr/src/app/
			ports:
			  - 8000:8000
3. Build the Docker image and start/stop container from CLI
		docker compose up -d
4. Verify and operate
	docker ps  //how any docker containers that are running on the system
	docker compose ps // only show containers created from images built from the docker-compose.yml file in the current directory, or any parent directory. 
	docker compose stop 
				// no container ID is required as an argument. It will stop all containers that were started with the docker compose up command
				//Also, where docker stop <containerID> can be used from any directory, in order to use the docker compose stop command, you must be in the same directory as the docker-compose.yml file that was used to start the containers, or a child directory. 
	docker compose down
				//is a shortcut to both docker compose stop and docker compose rm in a single command. 
				
Docker Publishing
=========================
1. Log in to your Docker Hub account. - use github 
2. Log in to Docker Hub using the below command 
		winpty docker login
3. Tag the hellodjango image with both the namespace and the version,  substitute in your own Docker Hub username for namespace:
		docker tag hellodjango namespace/hellodjango:v1  example -> docker tag hellodjango emecar/hellodjango:v1
4. 	push the Docker image to the Docker Hub registry
		docker push namespace/hellodjango:v1 
5.	docker logout

Create a Private Docker Registry
=============================
1. Pull the Docker registry image from Docker Hub and run it
		docker pull registry
		docker run -d -p 5000:5000 registry  //Note: Private registry is now running on port 5000
		docker tag hellodjango localhost:5000/hellodjango:v1  //Note: Instead of your Docker Hub username for the namespace, you are using localhost:5000, where the private registry container is running.
		docker push localhost:5000/hellodjango:v1  //push the hellodjango image to the private registry
2 Test the result by Removing the image from the local repository and attempting to pull it from local registry
		docker rmi localhost:5000/hellodjango:v1
		docker pull localhost:5000/hellodjango:v1

Persisting Docker Data (Using docker volumes)
=============================================
docker logs my_jenkins
docker volume ls	

docker run -p 8080:8080 -p 50000:50000 --rm -d --name my_jenkins -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts-jdk11
	the flag -v will look for a volume named "jenkins_home" that is managed by Docker within the host machine's filesystem and map the containers - "/var/jenkins_home"

Host static content by using a bind mount
==================
docker run --rm --name my_nginx -d -p 8080:80 -v /"$(pwd)":/usr/share/nginx/html:ro nginx:latest
	//this example mounts a volume for hosting static web pages on nginx. "$(pwd)" specifies your present working directory

docker volume inspect <volume name>

Host static content by copying to a new image
==============================================
Enter this content into the Dockerfile
	FROM nginx
	COPY . /usr/share/nginx/html    //he result of this COPY instruction is that the contents of the using_nginx/ folder (i.e. the hello.html file) are copied to the Docker image's /usr/share/nginx/html folder.